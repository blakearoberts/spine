// Generated by CoffeeScript 1.12.4
(function() {
  var $, Firebase, Model, Spine, User,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = this.Spine || require('spine');

  $ = Spine.$;

  Firebase = (function(superClass) {
    extend(Firebase, superClass);

    function Firebase(params) {
      Firebase.__super__.constructor.apply(this, arguments);
    }

    Firebase.prototype.initFirebase = function(config) {
      var ctr;
      ctr = this;
      firebase.initializeApp(config);
      return firebase.auth().onAuthStateChanged((function(userParams) {
        ctr.log('firebase auth state change', userParams);
        if (userParams) {
          return userParams.getToken().then(function(accessToken) {
            userParams['accessToken'] = accessToken;
            ctr.appUser = new User(userParams);
            return ctr.trigger('firebaseAuthChange');
          });
        }
      }), function(error) {
        return ctr.log('auth error', error);
      });
    };

    Firebase.firebaseSignOut = function() {
      var deferred, promise;
      deferred = $.Deferred();
      promise = deferred.promise();
      firebase.auth().signOut().then(function() {
        if (Firebase.appUser) {
          delete Firebase.appUser;
        }
        return deffered.resolve();
      });
      return promise;
    };

    return Firebase;

  })(Spine.Controller);

  Model = {
    extended: function() {
      if (!firebase) {
        return;
      }
      this.change(this.saveFirebase);
      this.fetch(this.loadFirebase);
      if (this.listenToFirebase) {
        return this.startLoadListener();
      }
    },
    saveFirebase: function() {
      var result;
      result = JSON.parse(JSON.stringify(this));
      return firebase.database().ref(this.ref + result[0].id).set(result[0]);
    },
    startLoadListener: function() {
      return firebase.database().ref(this.ref + this.id).on('value', (function(_this) {
        return function(data) {
          return _this.refresh(data.val() || [], options);
        };
      })(this));
    },
    loadFirebase: function(options) {
      var deferred, promise;
      if (options == null) {
        options = {};
      }
      if (!options.hasOwnProperty('clear')) {
        options.clear = true;
      }
      deferred = $.Deferred();
      promise = deferred.promise();
      if (!firebase.auth().currentUser) {
        deferred.reject();
        return promise;
      }
      firebase.database().ref(this.ref).once('value').then((function(_this) {
        return function(data) {
          _this.refresh(data.val() || [], options);
          return deferred.resolve(data);
        };
      })(this));
      return promise;
    }
  };

  User = (function() {
    function User(params) {
      this.displayName = params.displayName;
      this.email = params.email;
      this.emailVerified = params.emailVerified;
      this.photoURL = params.photoURL;
      this.isAnonymous = params.isAnonymous;
      this.uid = params.uid;
      this.accessToken = params.accessToken;
    }

    return User;

  })();

  Firebase.Model = Model;

  Firebase.User = User;

  Spine.Firebase = Firebase;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Firebase;
  }

}).call(this);
