// Generated by CoffeeScript 1.12.4
(function() {
  var $, Firebase, Model, Spine, User,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = this.Spine || require('spine');

  $ = Spine.$;

  Firebase = (function(superClass) {
    extend(Firebase, superClass);

    function Firebase(params) {
      Firebase.__super__.constructor.apply(this, arguments);
    }

    Firebase.prototype.initFirebase = function(config) {
      var ctr;
      ctr = this;
      firebase.initializeApp(config);
      return firebase.auth().onAuthStateChanged((function(userParams) {
        if (!userParams) {
          ctr.trigger('firebaseAuthOut');
        } else {
          userParams.getToken().then(function(accessToken) {
            userParams['accessToken'] = accessToken;
            ctr.appUser = new User(userParams);
            return ctr.trigger('firebaseAuthIn');
          });
        }
        return ctr.trigger('firebaseAuthToggle');
      }), function(error) {
        return ctr.log('auth error', error);
      });
    };

    Firebase.signOut = function() {
      var promise, s_deferred;
      if (!firebase.auth().currentUser) {
        return;
      }
      s_deferred = $.Deferred();
      promise = s_deferred.promise();
      firebase.auth().signOut().then((function(_this) {
        return function() {
          if (_this.appUser) {
            delete _this.appUser;
          }
          return s_deferred.resolve();
        };
      })(this));
      return promise;
    };

    Firebase.deleteUser = function() {
      var d_deferred, promise;
      if (!firebase.auth().currentUser) {
        return;
      }
      d_deferred = $.Deferred();
      promise = d_deferred.promise();
      firebase.auth().currentUser["delete"]().then((function(_this) {
        return function() {
          if (_this.appUser) {
            delete _this.appUser;
          }
          return d_deferred.resolve();
        };
      })(this))["catch"](function(error) {
        return d_deferred.reject(error);
      });
      return promise;
    };

    return Firebase;

  })(Spine.Controller);

  Model = {
    extended: function() {
      if (!firebase) {
        return;
      }
      if (!this.ref) {
        error('Please add variable \'ref\' to this Spine.Firebase.Model');
      }
    },
    load: function(options) {
      var l_deferred, promise;
      if (options == null) {
        options = {};
      }
      if (!this.fbref) {
        this.fbref = firebase.database().ref(this.ref);
      }
      if (!options.hasOwnProperty('clear')) {
        options.clear = true;
      }
      l_deferred = $.Deferred();
      promise = l_deferred.promise();
      if (options != null ? options.child : void 0) {
        this.fbref.child(options.child).on('value', (function(_this) {
          return function(data) {
            _this.refresh(data.val() || [], options);
            l_deferred.resolve(data.val());
            return console.log('firebase load', data.val());
          };
        })(this));
      } else {
        this.fbref.on('value', (function(_this) {
          return function(data) {
            var records;
            records = [];
            data.forEach(function(child) {
              return records.push(child.val());
            });
            _this.refresh(records || [], options);
            l_deferred.resolve(records);
            return console.log('firebase load', records);
          };
        })(this));
      }
      return promise;
    },
    loadOnce: function(options) {
      var l_deferred, promise;
      if (options == null) {
        options = {};
      }
      if (!this.fbref) {
        this.fbref = firebase.database().ref(this.ref);
      }
      if (!options.hasOwnProperty('clear')) {
        options.clear = true;
      }
      l_deferred = $.Deferred();
      promise = l_deferred.promise();
      if (options.child) {
        this.fbref.child(options.child).once('value', (function(_this) {
          return function(data) {
            _this.refresh(data.val() || [], options);
            l_deferred.resolve(data.val());
            return console.log('firebase load', data.val());
          };
        })(this));
      } else {
        this.fbref.once('value', (function(_this) {
          return function(data) {
            _this.refresh(data.val() || [], options);
            l_deferred.resolve(data.val());
            return console.log('firebase load', data.val());
          };
        })(this));
      }
      return promise;
    },
    off: function() {
      var ref;
      return (ref = this.fbref) != null ? ref.off() : void 0;
    },
    push: (function(_this) {
      return function(record) {
        var p_deferred, promise, recordRef;
        if (!_this.fbref) {
          _this.fbref = firebase.database().ref(_this.ref);
        }
        p_deferred = $.Deferred();
        promise = p_deferred.promise();
        recordRef = _this.fbref.push();
        record.id = recordRef.key;
        recordRef.set(record.attributes()).then(function() {
          return p_deferred.resolve(record);
        });
        return promise;
      };
    })(this),
    update: function(record, options) {
      var i, len, obj, promise, ref, u_deferred, updates;
      if (record == null) {
        record = {};
      }
      if (options == null) {
        options = {};
      }
      if (!this.fbref) {
        this.fbref = firebase.database().ref(this.ref);
      }
      u_deferred = $.Deferred();
      promise = u_deferred.promise();
      if (record.id) {
        this.fbref.child(record.id).update(record.attributes()).then(function() {
          console.log('firebase update record', record.attributes());
          return u_deferred.resolve();
        });
      } else {
        updates = {};
        ref = this.all();
        for (i = 0, len = ref.length; i < len; i++) {
          obj = ref[i];
          updates[obj.id] = obj.attributes();
        }
        this.fbref.update(updates).then(function() {
          console.log('firebase update', updates);
          return u_deferred.resolve();
        });
      }
      return promise;
    },
    "delete": function(record, options) {
      var d_deferred, promise;
      if (record == null) {
        record = {};
      }
      if (options == null) {
        options = {};
      }
      if (!this.fbref) {
        this.fbref = firebase.database().ref(this.ref);
      }
      d_deferred = $.Deferred();
      promise = d_deferred.promise();
      if (record.id) {
        this.fbref.child(record.id).remove().then(function() {
          console.log('firebase delete record');
          return d_deferred.resolve();
        })["catch"](function(error) {
          console.log('firebase delete record error', error);
          return d_deferred.reject(error);
        });
      } else {
        this.fbref.remove().then(function() {
          console.log('firebase delete all');
          return d_deferred.resolve();
        })["catch"](function(error) {
          console.log('firebase delete error', error);
          return d_deferred.reject(error);
        });
      }
      return promise;
    }
  };

  User = (function() {
    function User(params) {
      this.displayName = params.displayName;
      this.email = params.email;
      this.emailVerified = params.emailVerified;
      this.photoURL = params.photoURL;
      this.isAnonymous = params.isAnonymous;
      this.uid = params.uid;
      this.accessToken = params.accessToken;
    }

    return User;

  })();

  Firebase.Model = Model;

  Firebase.User = User;

  Spine.Firebase = Firebase;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Firebase;
  }

}).call(this);
